require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SessionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # MyWork. As you add validations to MyWork, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { email: @user.email, password: 'password' }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MyWorksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    @user = FactoryGirl.create(:user)
  end 

  describe "POST #create" do
    context "with valid params" do
      it "creates a new session" do
        post :create, { email: @user.email, password: 'password' }
        expect(session[:user_id]).to eq(@user.id)
      end

      it "redirects to last_path" do
        post :create, valid_attributes
        expect(response).to redirect_to(root_path)
      end
    end

    context "with invalid params" do
      it "no session is created" do
        post :create, { email: @user.email, password: 'password1' }
        expect(session[:user_id]).to be_nil
      end

      it "redirects to last_path" do
        post :create, valid_attributes
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the session" do
      delete :destroy
      expect(session[:user_id]).to be_nil
    end

    it "redirects to root path" do
      delete :destroy
      expect(response).to redirect_to(root_path)
    end
  end

end
